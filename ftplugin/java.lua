-- -- Java Language Server configuration.
-- -- Locations:
-- -- 'nvim/ftplugin/java.lua'.
-- -- 'nvim/lang-servers/intellij-java-google-style.xml'

-- local jdtls_ok, jdtls = pcall(require, "jdtls")
-- if not jdtls_ok then
-- 	vim.notify("JDTLS not found, install with `:LspInstall jdtls`")
-- 	return
-- end

-- -- See `:help vim.lsp.start_client` for an overview of the supported `config` options.
-- local jdtls_path = vim.fn.stdpath("data") .. "/mason/packages/jdtls"
-- local path_to_lsp_server = jdtls_path .. "/config_linux"
-- local path_to_plugins = jdtls_path .. "/plugins/"
-- local path_to_jar = path_to_plugins .. "org.eclipse.equinox.launcher_1.6.400.v20210924-0641.jar"
-- local lombok_path = path_to_lsp_server .. "/lombok.jar"

-- local root_markers = { ".git", "mvnw", "gradlew", "pom.xml", "build.gradle" }
-- local root_dir = require("jdtls.setup").find_root(root_markers)
-- if root_dir == "" then
-- 	return
-- end

-- local project_name = vim.fn.fnamemodify(vim.fn.getcwd(), ":p:h:t")
-- local workspace_dir = vim.fn.stdpath("data") .. "/site/java/workspace-root/" .. project_name
-- os.execute("mkdir " .. workspace_dir)

-- local status_cmp_ok, cmp_nvim_lsp = pcall(require, "cmp_nvim_lsp")
-- if not status_cmp_ok then
-- 	return
-- end

-- local capabilities = vim.lsp.protocol.make_client_capabilities()
-- capabilities.textDocument.completion.completionItem.snippetSupport = false
-- capabilities = cmp_nvim_lsp.default_capabilities(capabilities)

-- local extendedClientCapabilities = jdtls.extendedClientCapabilities
-- extendedClientCapabilities.resolveAdditionalTextEditsSupport = true

-- local on_attach = function(client, bufnr)
-- 	-- Enable completion triggered by <c-x><c-o>
-- 	vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")
-- 	-- Mappings.

-- 	local opts = { noremap = true, silent = true, buffer = bufnr }
-- 	local opt = { noremap = true, silent = true, buffer = bufnr }
-- 	vim.keymap.set("n", "<leader>gD", "<cmd>lua vim.lsp.buf.declaration()<CR>", opts)
-- 	vim.keymap.set("n", "<leader>gd", "<cmd>lua vim.lsp.buf.definition()<CR>", opts)
-- 	vim.keymap.set("n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>", opt)
-- 	vim.keymap.set("n", "<leader>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>", opts)
-- 	vim.keymap.set("n", "<leader>gi", "<cmd>lua vim.lsp.buf.implementation()<CR>", opts)
-- 	vim.keymap.set("n", "<C-k>", "<cmd>lua vim.lsp.buf.signature_help()<CR>", opts)
-- 	vim.keymap.set("n", "<leader>wa", "<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>", opts)
-- 	vim.keymap.set("n", "<leader>wr", "<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>", opts)
-- 	vim.keymap.set("n", "<leader>wl", "<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>", opts)
-- 	vim.keymap.set("n", "<leader>dt", "<cmd>lua vim.lsp.buf.type_definition()<CR>", opts)
-- 	vim.keymap.set("n", "<leader>rn", "<cmd>lua vim.lsp.buf.rename()<CR>", opts)
-- 	vim.keymap.set("n", "<leader>gr", "<cmd> Telescope lsp_references<CR>", opts)
-- 	vim.keymap.set("n", "<leader><leader>e", "<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>", opts)
-- 	vim.keymap.set("n", "[d", "<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>", opts)
-- 	vim.keymap.set("n", "]d", "<cmd>lua vim.lsp.diagnostic.goto_next()<CR>", opts)
-- 	vim.keymap.set("n", "<leader>q", "<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>", opts)

-- 	vim.keymap.set("n", "<leader><leader>f", "<cmd>lua vim.lsp.buf.format()<CR>", opts)
-- 	-- Set some keybinds conditional on server capabilities
-- 	-- if client.resolved_capabilities.document_formatting then
-- 	--   vim.keymap.set("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
-- 	-- elseif client.resolved_capabilities.document_range_formatting then
-- 	--   vim.keymap.set("n", "<space>f", "<cmd>lua vim.lsp.buf.range_formatting()<CR>", opts)
-- 	-- end
-- 	-- Set autocommands conditional on server_capabilities

-- 	-- if client.resolved_capabilities.document_highlight then
-- 	if client.server_capabilities.document_highlight then
-- 		vim.api.nvim_exec(
-- 			[[
--     augroup lsp_document_highlight
--     autocmd! * <buffer>
--     autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
--     autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
--     augroup END
--     ]],
-- 			false
-- 		)
-- 	end
-- end

-- -- Main Config
-- local config = {
-- 	-- The command that starts the language server
-- 	-- See: https://github.com/eclipse/eclipse.jdt.ls#running-from-the-command-line

-- 	on_attach = on_attach,
-- 	capabilities = capabilities,
-- 	cmd = {
-- 		"java",
-- 		"-Declipse.application=org.eclipse.jdt.ls.core.id1",
-- 		"-Dosgi.bundles.defaultStartLevel=4",
-- 		"-Declipse.product=org.eclipse.jdt.ls.core.product",
-- 		"-Dlog.protocol=true",
-- 		"-Dlog.level=ALL",
-- 		"-javaagent:" .. lombok_path,
-- 		"-Xms1g",
-- 		"--add-modules=ALL-SYSTEM",
-- 		"--add-opens",
-- 		"java.base/java.util=ALL-UNNAMED",
-- 		"--add-opens",
-- 		"java.base/java.lang=ALL-UNNAMED",

-- 		"-jar",
-- 		path_to_jar,
-- 		"-configuration",
-- 		path_to_lsp_server,
-- 		"-data",
-- 		workspace_dir,
-- 	},

-- 	-- This is the default if not provided, you can remove it. Or adjust as needed.
-- 	-- One dedicated LSP server & client will be started per unique root_dir
-- 	root_dir = root_dir,

-- 	-- Here you can configure eclipse.jdt.ls specific settings
-- 	-- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request
-- 	-- for a list of options
-- 	settings = {
-- 		java = {
-- 			eclipse = {
-- 				downloadSources = true,
-- 			},
-- 			configuration = {
-- 				updateBuildConfiguration = "interactive",
-- 			},
-- 			maven = {
-- 				downloadSources = true,
-- 			},
-- 			implementationsCodeLens = {
-- 				enabled = true,
-- 			},
-- 			referencesCodeLens = {
-- 				enabled = true,
-- 			},
-- 			references = {
-- 				includeDecompiledSources = true,
-- 			},
-- 			-- format = {
-- 			--   enabled = true,
-- 			--   settings = {
-- 			--     url = vim.fn.stdpath "config" .. "/lang-servers/intellij-java-google-style.xml",
-- 			--     profile = "GoogleStyle",
-- 			--   },
-- 		},
-- 	},
-- 	signatureHelp = { enabled = true },
-- 	completion = {
-- 		favoriteStaticMembers = {
-- 			"org.hamcrest.MatcherAssert.assertThat",
-- 			"org.hamcrest.Matchers.*",
-- 			"org.hamcrest.CoreMatchers.*",
-- 			"org.junit.jupiter.api.Assertions.*",
-- 			"java.util.Objects.requireNonNull",
-- 			"java.util.Objects.requireNonNullElse",
-- 			"org.mockito.Mockito.*",
-- 		},
-- 		importOrder = {
-- 			"java",
-- 			"javax",
-- 			"com",
-- 			"org",
-- 		},
-- 	},
-- 	extendedClientCapabilities = extendedClientCapabilities,
-- 	sources = {
-- 		organizeImports = {
-- 			starThreshold = 9999,
-- 			staticStarThreshold = 9999,
-- 		},
-- 	},
-- 	codeGeneration = {
-- 		toString = {
-- 			template = "${object.className}{${member.name()}=${member.value}, ${otherMembers}}",
-- 		},
-- 		useBlocks = true,
-- 	},

-- 	flags = {
-- 		allow_incremental_sync = true,
-- 	},
-- 	init_options = {
-- 		bundles = {
-- 			vim.fn.glob("~/.local/share/nvim/mason/share/java-debug-adapter/com.microsoft.java.debug.plugin.jar", true),
-- 		},
-- 	},
-- }

-- config["on_attach"] = function(client, bufnr)
-- 	require("lsp_signature").on_attach({
-- 		bind = true, -- This is mandatory, otherwise border config won't get registered.
-- 		floating_window_above_cur_line = false,
-- 		padding = "",
-- 		handler_opts = {
-- 			border = "rounded",
-- 		},
-- 	}, bufnr)
-- end

-- -- This starts a new client & server,
-- -- or attaches to an existing client & server depending on the `root_dir`.
-- require("jdtls").start_or_attach(config)
